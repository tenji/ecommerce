<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
    http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
    http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd"
	default-autowire="byName" default-lazy-init="false">

	<context:property-placeholder location="classpath:/dataSource.properties" />

	<!-- MySQL定义数据源Bean，使用DBCP数据源实现 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<!-- 指定连接数据库驱动，使用log4jdbc -->
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<!-- 指定连接数据库URL，使用log4jdbc -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	
	<!-- SpringMVC配置 -->
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="webBindingInitializer">
			<bean class="com.tenjishen.common.converter.DateConverter" />
		</property>
		<property name="messageConverters">
			<list>
				<bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter" />
				<bean class="org.springframework.http.converter.StringHttpMessageConverter">
					<property name="writeAcceptCharset" value="false" />
					<property name="supportedMediaTypes">
						<list>
							<value>text/plain;charset=UTF-8</value>
							<value>*/*;charset=UTF-8</value>
						</list>
					</property>
				</bean>
				<bean class="org.springframework.http.converter.xml.SourceHttpMessageConverter" />
				<bean class="org.springframework.http.converter.support.AllEncompassingFormHttpMessageConverter" />
				<bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"></bean>
			</list>
		</property>
	</bean>
    
	<!-- 
		自动注入SpringMVC所需要的Bean
		support JSR303 annotation if JSR 303 validation present on classpath
	-->
	<mvc:annotation-driven />
	
	<!-- component-scan自动搜索@Component , @Controller , @Service , @Repository等标注的类 -->
	<context:component-scan base-package="com.tenjishen" />
	
	<!-- SpringMVC视图解析器 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	<!-- bind your messages.properties -->
	<bean class="org.springframework.context.support.ResourceBundleMessageSource"
		id="messageSource">
		<property name="basename" value="messages" />
	</bean>
	
	<!-- 配置文件上传解析器 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8" />
	</bean>
	
	<!-- Json解析器，使用@ResponseBody可以直接将对象转换为json返回客户端 -->
	<bean id="jsonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
	</bean>
	
	<!-- 拦截器 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/admin/**"/>
			<mvc:exclude-mapping path="/admin/validateCode"/>
			<mvc:exclude-mapping path="/admin/loginProcess"/>
			<mvc:exclude-mapping path="/admin/logout"/>
			<bean class="com.tenjishen.common.interceptor.AutoLoginInterceptor"></bean>
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/admin/**"/>
			<mvc:exclude-mapping path="/admin/validateCode"/>
			<mvc:exclude-mapping path="/admin/login"/>
			<mvc:exclude-mapping path="/admin/loginOther"/>
			<mvc:exclude-mapping path="/admin/loginProcess"/>
			<mvc:exclude-mapping path="/admin/logout"/>
			<mvc:exclude-mapping path="/admin/isUserExist"/>
			<mvc:exclude-mapping path="/admin/isValidateCodeRight"/>
			<bean class="com.tenjishen.common.interceptor.LoginInterceptor"></bean>
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/admin/**"/>
			<mvc:exclude-mapping path="/admin/validateCode"/>
			<mvc:exclude-mapping path="/admin/login"/>
			<mvc:exclude-mapping path="/admin/loginOther"/>
			<mvc:exclude-mapping path="/admin/loginProcess"/>
			<mvc:exclude-mapping path="/admin/logout"/>
			<mvc:exclude-mapping path="/admin/isUserExist"/>
			<mvc:exclude-mapping path="/admin/isValidateCodeRight"/>
			<mvc:exclude-mapping path="/admin/myDashboard"/>
			<mvc:exclude-mapping path="/admin/noAuth"/>
			<bean class="com.tenjishen.common.interceptor.AuthorizationInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors>
	<!-- SpringMVC配置 End -->

	<!-- log4jdbc可以将数据源执行的sql将占位符?替换成字符,并以日志打印出来. log4j配置: log4j.logger.jdbc.sqltiming=INFO 
		详情请看: http://code.google.com/p/rapid-framework/wiki/log4jdbc 如oracle示例: 原来的sql: 
		select * from user where birth_date = ? and username = ? and age > ? 转换后sql: 
		select * from user where birth_date = to_date('2010-08-13','yyyy-mm-dd') 
		and username = 'badqiu' and age > 20 -->
	<bean id="log4jdbcInterceptor" class="net.sf.log4jdbc.DataSourceSpyInterceptor" />
	<bean id="dataSourceLog4jdbcAutoProxyCreator"
		class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="interceptorNames">
			<list>
				<value>log4jdbcInterceptor</value>
			</list>
		</property>
		<property name="beanNames">
			<list>
				<value>dataSource</value>
			</list>
		</property>
	</bean>

	<!-- 定义Hibernate的SessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- packagesToScan可以自动搜索某个package的全部标记@Entity class -->
		<property name="packagesToScan">
			<list>
				<value>com.**.model</value>
			</list>
		</property>
		<!-- Hibernate属性配置 -->
		<property name="hibernateProperties">
			<props>
				<!--常用数据库方言 MySQL5Dialect,SQLServerDialect,OracleDialect,SybaseDialect,DB2Dialect,HSQLDialect -->
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.use_sql_comments">true</prop>
				<prop key="hibernate.query.substitutions">true 1, false 0</prop>
				<prop key="hibernate.default_batch_fetch_size">4</prop>
			</props>
		</property>

		<!-- <property name="mappingLocations"> -->
		<!-- 用来列出所有的PO映射文件，classpath表示src目录，这里使用通配符 -->
		<!-- <value>classpath:/hibernate/*.hbm.xml</value> </property> -->
	</bean>

	<!-- 使用AspectJ方式配置AOP -->
	<aop:aspectj-autoproxy proxy-target-class="true" />
	<aop:config proxy-target-class="true" />

	<!-- 使用注解方式定义事务 -->
	<tx:annotation-driven proxy-target-class="true"
		transaction-manager="transactionManager" />

	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 配置事务传播特性 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="load*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<!-- 配置哪些类的哪些方法参与事务 -->
	<aop:config>
		<aop:advisor pointcut="execution(* com.tenjishen.service..*.*(..))"
			advice-ref="transactionAdvice" />
	</aop:config>

	<!-- 异步执行 -->
	<bean id="taskExecutor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<!-- 核心线程数，默认为1 -->
		<property name="corePoolSize" value="10" />
		<!-- 最大线程数，默认为Integer.MAX_VALUE -->
		<property name="maxPoolSize" value="30" />
	</bean>
	
	<!-- 异常处理器 -->
	<bean id="exceptionResolver" class="com.tenjishen.common.handler.ExceptionHandler"/>
	
	<!-- LUCENE SEARCH CONFIG -->
    <!-- 设置字段内容长度，这里不做限定   -->
    <!-- <bean id="MAXFIELDLENGTH2" class="org.apache.lucene.index.IndexWriter.MaxFieldLength.UNLIMITED" />
    set your analyzer, to be used by the IndexWriter and QueryParser ，关于分词器，因为我们主要进行中文搜索，所以要选择好点的中文分词器，我选择了paoding  
    <bean id="luceneAnalyzer" class="net.paoding.analysis.analyzer.PaodingAnalyzer">
    </bean>   --> 
      
    <!-- set your Lucene directory -->
    <!-- in this case I am pulling the location from a properties file -->
    <!-- also, using the SimpleFSLockFactory ,数据文件存放位置设置-->
    <!-- <bean id="luceneDirectory" class="org.apache.lucene.store.SimpleFSDirectory" >
        <constructor-arg>
            <bean class="java.io.File">
                <constructor-arg value="D:\\common\\hahaha" />
            </bean>
        </constructor-arg>
    </bean> -->
      
    <!-- now you're ready to define the IndexWriter,这里创建 IndexWriter并引入相关bean-->  
    <!-- <bean id="indexWriter" class="org.apache.lucene.index.IndexWriter">     
        <constructor-arg ref="luceneDirectory" />
        <constructor-arg ref="luceneAnalyzer" />
        <constructor-arg name="create" value="false" />
        <constructor-arg ref="MAXFIELDLENGTH2" />
    </bean> -->
      
    <!-- define the IndexSearcher ,这里创建IndexSearcher-->
   <!-- <bean id="indexSearcher" class="org.apache.lucene.search.IndexSearcher">
      <constructor-arg ref="luceneDirectory" />
   </bean> -->
	
</beans>
